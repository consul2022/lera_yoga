import json
import logging

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.markdown import hlink
from aiohttp import web
from yookassa.domain.notification import WebhookNotification

from bot.bot import bot

logger = logging.getLogger(__name__)


async def successful_payment_approve(request):
    try:
        # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ POST-–∑–∞–ø—Ä–æ—Å–∞
        event_json = json.loads(await request.text())

        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é WebhookNotification
        try:
            notification_object = WebhookNotification(event_json)
        except Exception as e:
            logger.error(f"Failed to parse notification: {e}")
            return web.json_response({"status": "error", "message": "Invalid notification"}, status=400)

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        payment = notification_object.object

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
        if notification_object.event != "payment.succeeded":
            logger.warning(f"Unhandled event type: {notification_object.event}")
            return web.json_response({"status": "ignored", "message": "Event ignored"}, status=200)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
        if payment.status != "succeeded":
            logger.warning(f"Payment status is not 'succeeded': {payment.status}")
            return web.json_response({"status": "ignored", "message": "Payment not succeeded"}, status=400)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ user_id –∏–∑ metadata –ø–ª–∞—Ç–µ–∂–∞
        user_id = payment.metadata.get("client_id")
        if user_id is None:
            logger.error("Missing user_id in payment metadata")
            return web.json_response({"status": "error", "message": "Missing user_id"}, status=200)
        CHANNEL_ID = -1002339239961
        try:
            chat_member = await bot.get_chat_member(CHANNEL_ID, user_id)
            if chat_member.status in ["member", "administrator", "creator"]:
                return
        except Exception as e:
            pass

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é)
        invite_link = await bot.create_chat_invite_link(CHANNEL_ID, expire_date=None, member_limit=1)
        buttons = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è üßò‚Äç‚ôÄÔ∏è",
                                  url=invite_link.invite_link)]
        ])
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫—É
        invite_text = f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–∞–Ω–∞–ª—É"
        await bot.send_message(invite_text, reply_markup=buttons)

        return web.json_response({"status": "success", "message": "Payment processed"})

    except Exception as e:
        logger.exception("Error processing payment")
        return web.json_response({"status": "error", "message": "Internal Server Error"}, status=500)
